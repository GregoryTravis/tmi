module DisplayTests (displayTests) where

import qualified Data.Map.Strict as M

import Test.Tasty (defaultMain, testGroup, localOption, TestTree)
import Test.Tasty.QuickCheck
import Test.Tasty.HUnit

import Code
import Display
import Lst
import Rec
import Rel
import Tuple
import Util
import Value

infix 1 ~?=
a ~?= e = testCase "" $ a @?= e

displayTestExpectedn\9553code........................................................................................................................................................................................\9474data..............................\9553\nnn\9553\9553fib.......................................................................................................................................................................................\9553\9474\9553cards...........................\9553\9553\nn\9553\9553Clo (fromList []) \"x\" (If (App (App (Prim \"==\") (Var \"x\")) (Const (I 0))) (Const (I 1)) (App (App (Prim \"*\") (Var \"x\")) (App (Var \"fib\") (App (App (Prim \"-\") (Var \"x\")) (Const (I 1))))))\9553\9474\9553\9556\9552\9552\9572\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9572\9552\9552\9552\9552\9552\9552\9572\9552\9552\9552\9552\9552\9552\9552\9552\9552\9559\9553\9553\nid\9474name......\9474points\9474type.....\9553\9553\9553\n\9553............................................................................................................................................................................................\9474\9553\9567\9472\9472\9532\9472\9472\9472\9472\9472\9472\9472\9472\9472\9472\9532\9472\9472\9472\9472\9472\9472\9532\9472\9472\9472\9472\9472\9472\9472\9472\9472\9570\9553\9553\n\9553............................................................................................................................................................................................\9474\9553\9553\&0.\9474\&9/11......\9474\&4.....\9474lifestyle\9553\9553\9553\n\9553............................................................................................................................................................................................\9474\9553\9567\9472\9472\9532\9472\9472\9472\9472\9472\9472\9472\9472\9472\9472\9532\9472\9472\9472\9472\9472\9472\9532\9472\9472\9472\9472\9472\9472\9472\9472\9472\9570\9553\9553\n\9553............................................................................................................................................................................................\9474\9553\9553\&1.\9474ghost.....\9474-3....\9474battle...\9553\9553\9553\n\9553............................................................................................................................................................................................\9474\9553\9567\9472\9472\9532\9472\9472\9472\9472\9472\9472\9472\9472\9472\9472\9532\9472\9472\9472\9472\9472\9472\9532\9472\9472\9472\9472\9472\9472\9472\9472\9472\9570\9553\9553\n\9553............................................................................................................................................................................................\9474\9553\9553\&2.\9474steely dan\9474\&20....\9474lifestyle\9553\9553\9553\n\9553............................................................................................................................................................................................\9474\9553\9562\9552\9552\9575\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9575\9552\9552\9552\9552\9552\9552\9575\9552\9552\9552\9552\9552\9552\9552\9552\9552\9565\9553\9553\n\9553............................................................................................................................................................................................\9474\9562\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9552\9565\9553\nn"
displayTest =
  let card id name ty points = recFromList [("id", I id), ("name", S name), ("type", S ty), ("points", I points)]
      cards = relFromList [card 0 "9/11" "lifestyle" 4, card 1 "ghost" "battle" (-3), card 2 "steely dan" "lifestyle" 20]
      dat = recFromList [("cards", cards)]
      code = recFromList [("fib", fibEvaled)]
        where fib = Lam "x" (If (App (App (Prim "==") (Var "x")) (Const (I 0)))
                            (Const (I 1))
                            (App (App (Prim "*") (Var "x"))
                                 (App (Var "fib")
                                      (App (App (Prim "-") (Var "x")) (Const (I 1))))))
              fibEvaled = eval M.empty M.empty fib
      world = recFromList [("code", code), ("data", dat)]
   in nDisplayValue world ~?= displayTestExpected

displayTests :: TestTree
displayTests = testGroup "Test Suite" [
    displayTest
  ]
